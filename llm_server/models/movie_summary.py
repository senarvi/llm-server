from datetime import date, datetime
from typing import Dict, List, Type

from llm_server import util
from llm_server.models.base_model import Model


class MovieSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, title: str = None, summary: str = None, grade: int = None, reviewer: str = None):
        """MovieSummary - a model defined in OpenAPI

        :param title: The title of this MovieSummary.
        :param summary: The summary of this MovieSummary.
        :param grade: The grade of this MovieSummary.
        :param reviewer: The reviewer of this MovieSummary.
        """
        self.openapi_types = {"title": str, "summary": str, "grade": int, "reviewer": str}

        self.attribute_map = {"title": "title", "summary": "summary", "grade": "grade", "reviewer": "reviewer"}

        self._title = title
        self._summary = summary
        self._grade = grade
        self._reviewer = reviewer

    @classmethod
    def from_dict(cls, dikt: dict) -> "MovieSummary":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MovieSummary of this MovieSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def title(self):
        """Gets the title of this MovieSummary.


        :return: The title of this MovieSummary.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MovieSummary.


        :param title: The title of this MovieSummary.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def summary(self):
        """Gets the summary of this MovieSummary.


        :return: The summary of this MovieSummary.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this MovieSummary.


        :param summary: The summary of this MovieSummary.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def grade(self):
        """Gets the grade of this MovieSummary.


        :return: The grade of this MovieSummary.
        :rtype: int
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this MovieSummary.


        :param grade: The grade of this MovieSummary.
        :type grade: int
        """
        if grade is None:
            raise ValueError("Invalid value for `grade`, must not be `None`")
        if grade is not None and grade > 5:
            raise ValueError("Invalid value for `grade`, must be a value less than or equal to `5`")
        if grade is not None and grade < 0:
            raise ValueError("Invalid value for `grade`, must be a value greater than or equal to `0`")

        self._grade = grade

    @property
    def reviewer(self):
        """Gets the reviewer of this MovieSummary.


        :return: The reviewer of this MovieSummary.
        :rtype: str
        """
        return self._reviewer

    @reviewer.setter
    def reviewer(self, reviewer):
        """Sets the reviewer of this MovieSummary.


        :param reviewer: The reviewer of this MovieSummary.
        :type reviewer: str
        """
        if reviewer is None:
            raise ValueError("Invalid value for `reviewer`, must not be `None`")

        self._reviewer = reviewer
