from datetime import date, datetime
from typing import Dict, List, Type

from llm_server import util
from llm_server.models.base_model import Model
from llm_server.models.validation_error_loc_inner import ValidationErrorLocInner


class ValidationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loc: List[ValidationErrorLocInner] = None, msg: str = None, type: str = None):
        """ValidationError - a model defined in OpenAPI

        :param loc: The loc of this ValidationError.
        :param msg: The msg of this ValidationError.
        :param type: The type of this ValidationError.
        """
        self.openapi_types = {"loc": List[ValidationErrorLocInner], "msg": str, "type": str}

        self.attribute_map = {"loc": "loc", "msg": "msg", "type": "type"}

        self._loc = loc
        self._msg = msg
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> "ValidationError":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationError of this ValidationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loc(self):
        """Gets the loc of this ValidationError.


        :return: The loc of this ValidationError.
        :rtype: List[ValidationErrorLocInner]
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this ValidationError.


        :param loc: The loc of this ValidationError.
        :type loc: List[ValidationErrorLocInner]
        """
        if loc is None:
            raise ValueError("Invalid value for `loc`, must not be `None`")

        self._loc = loc

    @property
    def msg(self):
        """Gets the msg of this ValidationError.


        :return: The msg of this ValidationError.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this ValidationError.


        :param msg: The msg of this ValidationError.
        :type msg: str
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")

        self._msg = msg

    @property
    def type(self):
        """Gets the type of this ValidationError.


        :return: The type of this ValidationError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ValidationError.


        :param type: The type of this ValidationError.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
